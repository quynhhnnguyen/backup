<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="c:\program files (x86)\microsoft visual studio\2017\enterprise\team tools\static analysis tools\fxcop\Xml\CodeAnalysisReport.xsl"?>
<FxCopReport Version="15.0">
 <Targets>
  <Target Name="C:\Users\693235\Desktop\ASP-Net-master\TravelExpertsFront\TravelExpertsFront\TravelExpertsFront\bin\TravelExpertsFront.dll">
   <Modules>
    <Module Name="travelexpertsfront.dll">
     <Namespaces>
      <Namespace Name="TravelExpertsFront">
       <Types>
        <Type Name="AgentsDB" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Members>
          <Member Name="#GetAgents()" Kind="Method" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="RethrowToPreserveStackDetails" Category="Microsoft.Usage" CheckId="CA2200" Status="Active" Created="2019-02-05 21:08:21Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Error" Path="C:\Users\693235\Desktop\ASP-Net-master\TravelExpertsFront\TravelExpertsFront\TravelExpertsFront\App_Code" File="AgentsDB.cs" Line="46">'AgentsDB.GetAgents()' rethrows a caught exception and specifies it explicitly as an argument. Use 'throw' without an argument instead, in order to preserve the stack location where the exception was initially raised.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
       </Types>
      </Namespace>
      <Namespace Name="TravelExpertsFront.App_Code">
       <Types>
        <Type Name="BookingDB" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Members>
          <Member Name="#GetBookingDetails(System.Int32)" Kind="Method" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="RethrowToPreserveStackDetails" Category="Microsoft.Usage" CheckId="CA2200" Status="Active" Created="2019-02-05 21:08:21Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Error" Path="C:\Users\693235\Desktop\ASP-Net-master\TravelExpertsFront\TravelExpertsFront\TravelExpertsFront\App_Code" File="BookingDB.cs" Line="101">'BookingDB.GetBookingDetails(int)' rethrows a caught exception and specifies it explicitly as an argument. Use 'throw' without an argument instead, in order to preserve the stack location where the exception was initially raised.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="CustomerDB" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Members>
          <Member Name="#Decrypt(System.String)" Kind="Method" Static="False" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message TypeName="Do not dispose objects multiple times" Category="Microsoft.Usage" CheckId="CA2202" Status="Active" Created="2019-02-05 21:08:21Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning" Path="C:\Users\693235\Desktop\ASP-Net-master\TravelExpertsFront\TravelExpertsFront\TravelExpertsFront\App_Code" File="CustomerDB.cs" Line="200">Object 'cs' can be disposed more than once in method 'CustomerDB.Decrypt(string)'. To avoid generating a System.ObjectDisposedException you should not call Dispose more than one time on an object.: Lines: 200</Issue>
             <Issue Certainty="75" Level="Warning" Path="C:\Users\693235\Desktop\ASP-Net-master\TravelExpertsFront\TravelExpertsFront\TravelExpertsFront\App_Code" File="CustomerDB.cs" Line="200">Object 'ms' can be disposed more than once in method 'CustomerDB.Decrypt(string)'. To avoid generating a System.ObjectDisposedException you should not call Dispose more than one time on an object.: Lines: 200, 202</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#Encrypt(System.String)" Kind="Method" Static="False" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message TypeName="Do not dispose objects multiple times" Category="Microsoft.Usage" CheckId="CA2202" Status="Active" Created="2019-02-05 21:08:21Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning" Path="C:\Users\693235\Desktop\ASP-Net-master\TravelExpertsFront\TravelExpertsFront\TravelExpertsFront\App_Code" File="CustomerDB.cs" Line="178">Object 'cs' can be disposed more than once in method 'CustomerDB.Encrypt(string)'. To avoid generating a System.ObjectDisposedException you should not call Dispose more than one time on an object.: Lines: 178</Issue>
             <Issue Certainty="75" Level="Warning" Path="C:\Users\693235\Desktop\ASP-Net-master\TravelExpertsFront\TravelExpertsFront\TravelExpertsFront\App_Code" File="CustomerDB.cs" Line="178">Object 'ms' can be disposed more than once in method 'CustomerDB.Encrypt(string)'. To avoid generating a System.ObjectDisposedException you should not call Dispose more than one time on an object.: Lines: 178, 180</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#getallCustomerInfoById(TravelExpertsFront.App_Code.Customer)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="Do not dispose objects multiple times" Category="Microsoft.Usage" CheckId="CA2202" Status="Active" Created="2019-02-05 21:08:21Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning" Path="C:\Users\693235\Desktop\ASP-Net-master\TravelExpertsFront\TravelExpertsFront\TravelExpertsFront\App_Code" File="CustomerDB.cs" Line="353">Object 'connection' can be disposed more than once in method 'CustomerDB.getallCustomerInfoById(Customer)'. To avoid generating a System.ObjectDisposedException you should not call Dispose more than one time on an object.: Lines: 353</Issue>
            </Message>
            <Message TypeName="RethrowToPreserveStackDetails" Category="Microsoft.Usage" CheckId="CA2200" Status="Active" Created="2019-02-05 21:08:21Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Error" Path="C:\Users\693235\Desktop\ASP-Net-master\TravelExpertsFront\TravelExpertsFront\TravelExpertsFront\App_Code" File="CustomerDB.cs" Line="343">'CustomerDB.getallCustomerInfoById(Customer)' rethrows a caught exception and specifies it explicitly as an argument. Use 'throw' without an argument instead, in order to preserve the stack location where the exception was initially raised.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#isValidUserName(System.String)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="RethrowToPreserveStackDetails" Category="Microsoft.Usage" CheckId="CA2200" Status="Active" Created="2019-02-05 21:08:21Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Error" Path="C:\Users\693235\Desktop\ASP-Net-master\TravelExpertsFront\TravelExpertsFront\TravelExpertsFront\App_Code" File="CustomerDB.cs" Line="130">'CustomerDB.isValidUserName(string)' rethrows a caught exception and specifies it explicitly as an argument. Use 'throw' without an argument instead, in order to preserve the stack location where the exception was initially raised.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#RegisterCustomer(System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.Nullable`1&lt;System.Int32&gt;)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="Do not dispose objects multiple times" Category="Microsoft.Usage" CheckId="CA2202" Status="Active" Created="2019-02-05 21:08:21Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning" Path="C:\Users\693235\Desktop\ASP-Net-master\TravelExpertsFront\TravelExpertsFront\TravelExpertsFront\App_Code" File="CustomerDB.cs" Line="94">Object 'connection' can be disposed more than once in method 'CustomerDB.RegisterCustomer(string, string, string, string, string, string, string, string, string, string, string, string, int?)'. To avoid generating a System.ObjectDisposedException you should not call Dispose more than one time on an object.: Lines: 94</Issue>
            </Message>
            <Message TypeName="RethrowToPreserveStackDetails" Category="Microsoft.Usage" CheckId="CA2200" Status="Active" Created="2019-02-05 21:08:21Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Error" Path="C:\Users\693235\Desktop\ASP-Net-master\TravelExpertsFront\TravelExpertsFront\TravelExpertsFront\App_Code" File="CustomerDB.cs" Line="84">'CustomerDB.RegisterCustomer(string, string, string, string, string, string, string, string, string, string, string, string, int?)' rethrows a caught exception and specifies it explicitly as an argument. Use 'throw' without an argument instead, in order to preserve the stack location where the exception was initially raised.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#UpdateUserProfile(System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.Int32,System.String)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="RethrowToPreserveStackDetails" Category="Microsoft.Usage" CheckId="CA2200" Status="Active" Created="2019-02-05 21:08:21Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Error" Path="C:\Users\693235\Desktop\ASP-Net-master\TravelExpertsFront\TravelExpertsFront\TravelExpertsFront\App_Code" File="CustomerDB.cs" Line="436">'CustomerDB.UpdateUserProfile(string, string, string, string, string, string, string, string, string, string, int, string)' rethrows a caught exception and specifies it explicitly as an argument. Use 'throw' without an argument instead, in order to preserve the stack location where the exception was initially raised.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
       </Types>
      </Namespace>
     </Namespaces>
    </Module>
   </Modules>
  </Target>
 </Targets>
 <Rules>
  <Rule TypeName="Do not dispose objects multiple times" Category="Microsoft.Usage" CheckId="CA2202">
   <Name>Do not dispose objects multiple times</Name>
   <Description>A correctly implemented Dispose method can be called multiple times without throwing an exception. However, this is not guaranteed and to avoid generating a System.ObjectDisposedException you should not call Dispose more than one time on an object.</Description>
   <Resolution Name="Default">Object {0} can be disposed more than once in method {1}. To avoid generating a System.ObjectDisposedException you should not call Dispose more than one time on an object.: Lines: 200</Resolution>
   <Owner>RuleOwner</Owner>
   <Url>http://msdn.microsoft.com/library/ms182334.aspx</Url>
   <Email />
   <MessageLevel Certainty="75">Warning</MessageLevel>
   <File Name="dataflowrules.dll" Version="15.0.0.0" />
  </Rule>
  <Rule TypeName="RethrowToPreserveStackDetails" Category="Microsoft.Usage" CheckId="CA2200">
   <Name>Rethrow to preserve stack details</Name>
   <Description>Use the IL rethrow instruction to preserve original stack details when re-raising a caught exception.</Description>
   <Resolution Name="Default">{0} rethrows a caught exception and specifies it explicitly as an argument. Use 'throw' without an argument instead, in order to preserve the stack location where the exception was initially raised.</Resolution>
   <Owner />
   <Url>http://msdn.microsoft.com/library/ms182363.aspx</Url>
   <Email>[none]</Email>
   <MessageLevel Certainty="95">Error</MessageLevel>
   <File Name="usagerules.dll" Version="15.0.0.0" />
  </Rule>
 </Rules>
 <Localized>
  <String Key="Category">Category</String>
  <String Key="Certainty">Certainty</String>
  <String Key="CollapseAll">Collapse All</String>
  <String Key="CheckId">Check Id</String>
  <String Key="Error">Error</String>
  <String Key="Errors">error(s)</String>
  <String Key="ExpandAll">Expand All</String>
  <String Key="Help">Help</String>
  <String Key="Line">Line</String>
  <String Key="Messages">message(s)</String>
  <String Key="LocationNotStoredInPdb">[Location not stored in Pdb]</String>
  <String Key="Project">Project</String>
  <String Key="Resolution">Resolution</String>
  <String Key="Rule">Rule</String>
  <String Key="RuleFile">Rule File</String>
  <String Key="RuleDescription">Rule Description</String>
  <String Key="Source">Source</String>
  <String Key="Status">Status</String>
  <String Key="Target">Target</String>
  <String Key="Warning">Warning</String>
  <String Key="Warnings">warning(s)</String>
  <String Key="ReportTitle">Code Analysis Report</String>
 </Localized>
</FxCopReport>
